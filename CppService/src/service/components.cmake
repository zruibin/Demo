
set(COMPONENTS_LIB "Service")

message(STATUS "------------------------------------------------------------------------------")

string(TOLOWER ${COMPONENTS_LIB} COMPONENTS_NAME) 
set(COMPONENTS_ROOT "src/${COMPONENTS_NAME}")
set(COMPONENTS_ROOT_PATH "${CMAKE_SOURCE_DIR}/${COMPONENTS_ROOT}")

set(COMPONENTS_BASE_PATH "${COMPONENTS_ROOT_PATH}/base")
set(COMPONENTS_COMPONENT_PATH "${COMPONENTS_ROOT_PATH}/components")
set(COMPONENTS_SHELL_PATH "${COMPONENTS_ROOT_PATH}/shell")

set(COMPONENT_INCLUDE_NAME "include")
set(COMPONENT_SOURCE_NAME "source")

list(APPEND COMPONENT_DIRECTORIES ${COMPONENTS_BASE_PATH})
list(APPEND EXPORT_COMPONENT_HEAD_DIRECTORIES ${COMPONENTS_BASE_PATH})
list(APPEND COMPONENT_DIRECTORIES ${COMPONENTS_COMPONENT_PATH})
list(APPEND COMPONENT_DIRECTORIES ${COMPONENTS_SHELL_PATH})


SUBDIRLIST(COMPONENTS_COMPONENT_DIRS ${COMPONENTS_COMPONENT_PATH})
foreach(subdir ${COMPONENTS_COMPONENT_DIRS}) 
    message("${subdir}: ${COMPONENTS_COMPONENT_PATH}/${subdir}/${COMPONENT_INCLUDE_NAME}")
    message("${subdir}: ${COMPONENTS_COMPONENT_PATH}/${subdir}/${COMPONENT_SOURCE_NAME}")
    list(APPEND COMPONENT_DIRECTORIES ${COMPONENTS_COMPONENT_PATH}/${subdir}/${COMPONENT_INCLUDE_NAME})
    list(APPEND COMPONENT_DIRECTORIES ${COMPONENTS_COMPONENT_PATH}/${subdir}/${COMPONENT_SOURCE_NAME})
    list(APPEND EXPORT_COMPONENT_HEAD_DIRECTORIES ${COMPONENTS_COMPONENT_PATH}/${subdir}/${COMPONENT_INCLUDE_NAME})
endforeach()

SUBDIRLIST(COMPONENTS_SHELL_DIRS ${COMPONENTS_SHELL_PATH})
foreach(subdir ${COMPONENTS_SHELL_DIRS}) 
    message("${subdir}: ${COMPONENTS_SHELL_PATH}/${subdir}")
    list(APPEND COMPONENT_DIRECTORIES ${COMPONENTS_SHELL_PATH}/${subdir})
endforeach()


foreach(directory IN LISTS COMPONENT_DIRECTORIES)
    list(APPEND COMPONENTS_INTERNAL_HEADER_DIRS ${directory})

    file(GLOB_RECURSE files "${directory}/*.h")
    list(APPEND COMPONENTS_HEADERS "${files}")
    file(GLOB_RECURSE files "${directory}/*.hpp")
    list(APPEND COMPONENTS_HEADERS "${files}")
    
    file(GLOB_RECURSE files "${directory}/*.c")
    list(APPEND COMPONENTS_SOURCES "${files}")
    file(GLOB_RECURSE files "${directory}/*.cc")
    list(APPEND COMPONENTS_SOURCES "${files}")
    file(GLOB_RECURSE files "${directory}/*.cpp")
    list(APPEND COMPONENTS_SOURCES "${files}")
endforeach()

list(APPEND COMPONENTS_HEADERS "${COMPONENTS_ROOT_PATH}/ServiceEngine.h")
list(APPEND COMPONENTS_SOURCES "${COMPONENTS_ROOT_PATH}/ServiceEngine.cc")


list(APPEND EXPORT_COMPONENT_HEAD_DIRECTORIES ${COMPONENTS_BASE_PATH})
foreach(directory IN LISTS EXPORT_COMPONENT_HEAD_DIRECTORIES)
    file(GLOB_RECURSE files "${directory}/*.h")
    list(APPEND EXPORT_HEADS "${files}")
    file(GLOB_RECURSE files "${directory}/*.hpp")
    list(APPEND EXPORT_HEADS "${files}")

    list(APPEND EXPORT_HEAD_DIRECTORIES "${directory}")
endforeach()
list(APPEND EXPORT_HEADS "${COMPONENTS_ROOT_PATH}/ServiceEngine.h")
list(APPEND EXPORT_HEAD_DIRECTORIES ${COMPONENTS_ROOT_PATH})


list(APPEND COMPONENTS_RESOURCES "${COMPONENTS_ROOT_PATH}/components.cmake")
list(APPEND COMPONENTS_RESOURCES "${COMPONENTS_ROOT_PATH}/components.py")
list(APPEND COMPONENTS_RESOURCES "${COMPONENTS_ROOT_PATH}/components.lua")

sourceGroup(${COMPONENTS_ROOT}
    ${COMPONENTS_HEADERS} 
    ${COMPONENTS_SOURCES} 
    ${COMPONENTS_RESOURCES}
)

add_library(${COMPONENTS_LIB} STATIC 
    ${COMPONENTS_HEADERS} 
    ${COMPONENTS_SOURCES} 
    ${COMPONENTS_RESOURCES}
)

# 强制按照C++语言编译
set_target_properties(${COMPONENTS_LIB} PROPERTIES LINKER_LANGUAGE CXX)
target_include_directories(${COMPONENTS_LIB} PRIVATE 
    ${EXPORT_HEAD_DIRECTORIES} 
    ${COMPONENTS_INTERNAL_HEADER_DIRS}
)

list(APPEND EXPORT_LIBS ${COMPONENTS_LIB})
# 相当于g++选项中的-I参数的作用
include_directories(${EXPORT_HEAD_DIRECTORIES})


# message(STATUS "COMPONENTS_HEADERS: ${COMPONENTS_HEADERS}")
# message(STATUS "COMPONENTS_SOURCES: ${COMPONENTS_SOURCES}")
# message(STATUS "COMPONENTS_RESOURCES: ${COMPONENTS_RESOURCES}")
# message(STATUS "COMPONENTS_INTERNAL_HEADER_DIRS: ${COMPONENTS_INTERNAL_HEADER_DIRS}")

# message(STATUS "EXPORT_HEAD_DIRECTORIES: ${EXPORT_HEAD_DIRECTORIES}")
# message(STATUS "EXPORT_HEADS: ${EXPORT_HEADS}")
# message(STATUS "EXPORT_LIBS: ${EXPORT_LIBS}")

message(STATUS "------------------------------------------------------------------------------")
